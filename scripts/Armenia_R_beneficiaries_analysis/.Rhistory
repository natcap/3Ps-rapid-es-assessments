'Hispanic / Latino/Latina/Latinx' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Black / African American / African' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Native Hawaiian / Samoan / Pacific Islander' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Mixed Race' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race'))  %>%
select(Role,rolegroup1,rolegroup2,race_eth,race_group)
language_role <- languages %>%
group_by(rolegroup1, lang_group) %>%
tally() %>% rename(rolegroup=rolegroup1)
language_role2 <- languages %>%
group_by(rolegroup2, lang_group) %>%
tally() %>% rename(rolegroup=rolegroup2)
language_all <- languages %>%
group_by(lang_group) %>%
tally() %>%
mutate(rolegroup = "All")
language_summary <- language_all %>% bind_rows(language_role) %>%
inner_join(rolegroup_count, by = "rolegroup") %>%
mutate(pct = n / response_cnt) %>%
mutate(rolegroup = fct_relevel(rolegroup,rolegroup_yorder1)) %>%
mutate(lang_group = str_wrap(.$lang_group,20)) %>%
group_by(rolegroup) %>% mutate(all = sum(n)) %>% ungroup() %>%
mutate(prc = n/all)
racegroup_order = c('Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race', 'White / Caucasian / European')
racegroup_yorder = rev(racegroup_order)
# Role Group Counts to calculate percentages for multi-reponse questions
rolegroup_count <- single_response %>%
group_by(rolegroup1) %>%
tally() %>% rename(rolegroup=rolegroup1,response_cnt=n)%>%
add_row(rolegroup="All",response_cnt=as.numeric(response_count))
rolegroup_count2 <- single_response %>%
group_by(rolegroup2) %>%
tally() %>% rename(rolegroup=rolegroup2,response_cnt=n) %>%
add_row(rolegroup="All",response_cnt=as.numeric(response_count))
# The total count of respondents
response_count <- single_response %>% summarise(., total = sum(count, na.rm=TRUE))
# Role Group Counts to calculate percentages for multi-reponse questions
rolegroup_count <- single_response %>%
group_by(rolegroup1) %>%
tally() %>% rename(rolegroup=rolegroup1,response_cnt=n)%>%
add_row(rolegroup="All",response_cnt=as.numeric(response_count))
rolegroup_count2 <- single_response %>%
group_by(rolegroup2) %>%
tally() %>% rename(rolegroup=rolegroup2,response_cnt=n) %>%
add_row(rolegroup="All",response_cnt=as.numeric(response_count))
# Languages
language_role <- languages %>%
group_by(rolegroup1, lang_group) %>%
tally() %>% rename(rolegroup=rolegroup1)
language_role2 <- languages %>%
group_by(rolegroup2, lang_group) %>%
tally() %>% rename(rolegroup=rolegroup2)
language_all <- languages %>%
group_by(lang_group) %>%
tally() %>%
mutate(rolegroup = "All")
View(languages)
View(language_role)
language_summary <- language_all %>% bind_rows(language_role) %>%
inner_join(rolegroup_count, by = "rolegroup") %>%
mutate(pct = n / response_cnt) %>%
mutate(rolegroup = fct_relevel(rolegroup,rolegroup_yorder1)) %>%
mutate(lang_group = str_wrap(.$lang_group,20)) %>%
group_by(rolegroup) %>% mutate(all = sum(n)) %>% ungroup() %>%
mutate(prc = n/all)
View(language_summary)
raceethcult_role <- race_ethnicity_culture %>%
group_by(rolegroup1, race_group) %>%
tally() %>% rename(rolegroup=rolegroup1)
raceethcult_role2 <- race_ethnicity_culture %>%
group_by(rolegroup2, race_group) %>%
tally() %>% rename(rolegroup=rolegroup2)
raceethcult_all <- race_ethnicity_culture %>%
group_by(race_group) %>%
tally() %>%
mutate(rolegroup = "All")
raceethcult_summary <- raceethcult_all %>% bind_rows(raceethcult_role) %>%
inner_join(rolegroup_count, by = "rolegroup") %>%
mutate(pct = n / response_cnt) %>%
mutate(rolegroup = fct_relevel(rolegroup,rolegroup_yorder1)) %>%
mutate(race_group = fct_relevel(race_group,racegroup_yorder))  %>%
mutate(race_group=str_wrap(race_group, 25))
View(raceethcult_summary)
View(race_ethnicity_culture)
race_ethnicity_culture %>% group_by(race_eth) %>% tally()
### look at changes over time
#note: due to authentication errors, the cleaned csv file was downloaded locally to be worked with
ot <- read_csv(paste0(base_path, "/DemoChanges_OverTime.csv"), col_types = cols(Year=col_character()))
# Ordering and Grouping for various categories
# Make groups
ot <- ot %>%
mutate(rolegroup1=Role) %>%
mutate(rolegroup2=Role) %>%
mutate(rolegroup1=recode(rolegroup1,
'Student'='Team',
'Post Doc'='Team',
'Staff'='Team',
'Other'='Team')) %>%
mutate(rolegroup2=recode(rolegroup2,
'Student'='Student, Post-Doc,\nor Other',
'Post Doc'='Student, Post-Doc,\nor Other',
'Other'='Student, Post-Doc,\nor Other'))
subset(., !is.na(Role))
ot_all <- ot %>% dplyr::select(1,3:9)
# recode race, ethnicity and culture by role
ot_race_eth <- ot_all %>%
separate_rows(race_eth, sep=',', convert=TRUE) %>%
mutate(race_eth = str_trim(race_eth,side="both")) %>%
mutate(race_eth_split = str_trim(race_eth,side="both")) %>%
mutate(race_group=race_eth_split) %>%
mutate(race_group=recode(race_group,
'Asian / Asian American' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Hispanic / Latino/Latina/Latinx' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Black / African American / African' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Native Hawaiian / Samoan / Pacific Islander' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race',
'Mixed Race' = 'Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race'))  %>%
select(Year,race_group)
racegroup_order = c('Asian/Asian American, Black/African American/African, Hispanic/Latino/Latina/Latinx, Native Hawaiian/Samoan/Pacific Islander, or Mixed Race', 'White / Caucasian / European')
racegroup_yorder = rev(racegroup_order)
# recode languages by role
ot_languages <-  ot %>%
separate_rows(Language, sep=',', convert=TRUE) %>%
#mutate(Language = str_trim(Language,side="both")) %>%
#mutate(lang_group=Language) %>%
mutate(lang_group=ifelse(.$Language %in% "English", 1, 2)) %>%
select(Year,Language,lang_group) %>%
mutate(lang_group=recode(lang_group,
'1' = 'English',
'2' = 'Language other than English'))
ot_age <- ot_all %>% dplyr::select(Year, Age) %>% group_by(Year, Age) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total) %>% subset(.$Age != "Opt out") %>% ungroup()
View(ot_age)
ot_gen <- ot_all %>% dplyr::select(Year, gender_id) %>% group_by(Year, gender_id) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total) %>% ungroup()
View(ot_gen)
ot_disab <- ot_all %>% dplyr::select(Year, disability) %>% group_by(Year, disability) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total) %>% ungroup() %>% mutate(disability = fct_relevel(disability,disab_order))
ot_lg <- ot_all %>% dplyr::select(Year, LGBTQ2IA) %>% group_by(Year, LGBTQ2IA) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total) %>% ungroup() %>% mutate(LGBTQ2IA = fct_relevel(LGBTQ2IA,disab_order))
View(ot_lg)
# languages over time
ot_lang <- ot_languages %>% dplyr::select(Year, lang_group) %>% group_by(Year, lang_group) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total)
View(ot_lang)
ot_r_e <- ot_race_eth %>% dplyr::select(Year, race_group) %>% group_by(Year, race_group) %>% tally() %>%
group_by(Year) %>% mutate(total=sum(n)) %>% mutate(prc=n/total) %>%
ungroup() %>% mutate(race_group = fct_relevel(race_group,racegroup_order)) %>%
mutate(race_group = str_wrap(.$race_group,20))
View(ot_r_e)
library(terra)
install.packages("terra")
library(terra)
library(terra)
library(raster)
library(tidyterra)
library(sf)
library(dplyr)
library(stringr)
library(exactextractr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # see here: https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
# beneficiary watersheds
beneficiaries_folder<-"./data/Inputs/Beneficiaries/economic_servicesheds"
#Ararat RBMP area and river basins
RBMP_area_folder<-"./data/Inputs/aoi_shp"
# DEM folder
DEM_folder<-".data/Inputs/swy/Hydrosheds"
DEM_file<-"DEM_90m_Armenia_hydrosheds_raw_Rafa_prj_bilinear.tif"
DEM<-rast(paste(DEM_folder,DEM_file,sep="/"))
# beneficiary watersheds
beneficiaries_folder<-"~./data/Inputs/Beneficiaries/economic_servicesheds"
# beneficiary watersheds
beneficiaries_folder<-"~./data/Inputs/Beneficiaries/economic_servicesheds"
#Ararat RBMP area and river basins
RBMP_area_folder<-"~./data/Inputs/aoi_shp"
# DEM folder
DEM_folder<-"./data/Inputs/swy/Hydrosheds"
DEM_file<-"DEM_90m_Armenia_hydrosheds_raw_Rafa_prj_bilinear.tif"
DEM<-rast(paste(DEM_folder,DEM_file,sep="/"))
# beneficiary watersheds
beneficiaries_folder<-"./data/Inputs/Beneficiaries/economic_servicesheds"
#Ararat RBMP area and river basins
RBMP_area_folder<-"./data/Inputs/aoi_shp"
# water yield folder
BF_folder<-"./Inputs/swy/AraratBMA_22062024"
BF_current_folder<-"SWY_1961_1990"
BF_2040_folder<-"SWY_2041_2070"
BF_2070_folder<-"SWY_2071_2100"
# load data
BF_file<-"B_1961_1990.tif"
BF_2040_file<-"B_2041_2070.tif"
BF_2070_file<-"B_2071_2100.tif"
BF<-rast(paste(BF_folder,BF_current_folder,BF_file,sep="/"))
# water yield folder
BF_folder<-"./data/Inputs/swy/AraratBMA_22062024"
BF_current_folder<-"SWY_1961_1990"
BF_2040_folder<-"SWY_2041_2070"
BF_2070_folder<-"SWY_2071_2100"
# load data
BF_file<-"B_1961_1990.tif"
BF_2040_file<-"B_2041_2070.tif"
BF_2070_file<-"B_2071_2100.tif"
BF<-rast(paste(BF_folder,BF_current_folder,BF_file,sep="/"))
BF_2040<-rast(paste(BF_folder,BF_2040_folder,BF_2040_file,sep="/"))
BF_2070<-rast(paste(BF_folder,BF_2070_folder,BF_2070_file,sep="/"))
BF<-resample(BF,DEM,method="bilinear")
BF_2040<-resample(BF_2040,DEM,method="bilinear")
BF_2070<-resample(BF_2070,DEM,method="bilinear")
AraratRBMP<-read_sf(paste(RBMP_area_folder,"aoi.shp",sep="/")) %>% filter(RB_NameEng==c("Azat","Vedi","Arpa") )
#output folder
Out_folder<-"./data/Outputs/valuation"
# load shapefiles
bf_ws_ff<-read_sf(paste(beneficiaries_folder,"ff_servicesheds.shp",sep="/"))
# beneficiary watersheds
beneficiaries_folder<-"./data/Inputs/Beneficiaries"
# load shapefiles
bf_ws_ff<-read_sf(paste(beneficiaries_folder,"ff_servicesheds.shp",sep="/"))
bf_ws_shp<-read_sf(paste(beneficiaries_folder,"shp_servicesheds.shp",sep='/'))
bf_ws_irri<-read_sf(paste(beneficiaries_folder,"Ir_servicesheds.shp",sep="/"))
# assign type
bf_ws_ff$type="Fish Farm"
bf_ws_shp$type="Hydropower"
bf_ws_irri$type="Agriculture"
# keep only few, identical fields for each type of beneficiary
bf_ws_ff=bf_ws_ff %>% select("type","Rev_AMD")
View(DEM)
View(AraratRBMP)
View(bf_ws_ff)
View(bf_ws_shp)
View(BF)
# load shapefiles
bf_ws_ff<-read_sf(paste(beneficiaries_folder,"ff_beneficiaries_servicesheds.shp",sep="/"))
bf_ws_shp<-read_sf(paste(beneficiaries_folder,"shpp_beneficiaries_servicesheds.shp",sep='/'))
bf_ws_irri<-read_sf(paste(beneficiaries_folder,"irrigation_beneficiaries_servicesheds.shp",sep="/"))
# assign type
bf_ws_ff$type="Fish Farm"
bf_ws_shp$type="Hydropower"
bf_ws_irri$type="Agriculture"
# keep only few, identical fields for each type of beneficiary
bf_ws_ff=bf_ws_ff %>% select("type","Rev_AMD")
bf_ws_shp=bf_ws_shp %>% select("type","Rev_AMD")
bf_ws_irri=bf_ws_irri %>% select("type","Rev_AMD")
# combine all beneficiary shapefiles in 1
bf_ws_comb<-rbind(bf_ws_ff,bf_ws_shp,bf_ws_irri)
View(bf_ws_comb)
# calculate value per m2. Note: remove units, because if the attribute used for accumulation has units attached, then the summation below will NOT work.
bf_ws_ff$area_m2<-st_area(bf_ws_ff) %>% as.vector()
bf_ws_shp$area_m2<-st_area(bf_ws_shp) %>% as.vector()
bf_ws_irri$area_m2<-st_area(bf_ws_irri) %>% as.vector()
bf_ws_ff$value_per_m2<-bf_ws_ff$Rev_AMD/bf_ws_ff$area_m2
bf_ws_shp$value_per_m2<-bf_ws_shp$Rev_AMD/bf_ws_shp$area_m2
bf_ws_irri$value_per_m2<-bf_ws_irri$Rev_AMD/bf_ws_irri$area_m2
# make storage structs
bf_ws_ff_stack<-list() #  for fishfarms
bf_ws_shp_stack<-list() #  for hydropower
bf_ws_irri_stack<-list() # for irrigation
# loop through beneficiary types
# loop through fishfarms
for (ii in 1:nrow(bf_ws_ff)){
bf_ws_ff_stack[[ii]]<-rasterize(x=bf_ws_ff[ii,],
y=DEM,
field="value_per_m2")
}
# loop through shp
for (ii in 1:nrow(bf_ws_shp)){
bf_ws_shp_stack[[ii]]<-rasterize(x=bf_ws_shp[ii,],
y=DEM,
field="value_per_m2")
}
# loop through irrigation
for (ii in 1:nrow(bf_ws_irri)){
bf_ws_irri_stack[[ii]]<-rasterize(x=bf_ws_irri[ii,],
y=DEM,
field="value_per_m2")
}
# get total values for each beneficiary type
bf_ws_ff_r<-app(rast(bf_ws_ff_stack),fun=sum,na.rm=T) %>% rename("fish farms"=sum)#  for fish farms
bf_ws_shp_r<-app(rast(bf_ws_shp_stack),fun=sum,na.rm=T) %>% rename("hydropower"=sum) #  for hydropower
bf_ws_irri_r<-app(rast(bf_ws_irri_stack),fun=sum,na.rm=T) %>% rename("irrigation"=sum)# for irrigation
# combine total sectoral values into raster stack
r<-c(bf_ws_ff_r,
bf_ws_irri_r,
bf_ws_shp_r)
plot(r)
# total value
bf_ws_tot_r  <- app(c(bf_ws_ff_r,
bf_ws_irri_r,
bf_ws_shp_r),
fun=sum,na.rm=T) %>% rename("total value"=sum)
plot(bf_ws_tot_r)
writeRaster(bf_ws_tot_r,paste(Out_folder,
"Total_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_ff_r,paste(Out_folder,
"FF_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_shp_r,paste(Out_folder,
"SHP_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_irri_r,paste(Out_folder,
"IRRI_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
### testing
plot(BF)
ind1<-bf_ws_tot_r*BF
names(ind1)<-  "current"
ind1_2070=bf_ws_tot_r*BF_2070
names(ind1_2070)<-  "2070"
ind1_2040=bf_ws_tot_r*BF_2040
names(ind1_2040)<-  "2040"
plot(c(ind1))
plot((ind1_2070-ind1))
plot((ind1_2040-ind1))
writeRaster(ind1,paste(Out_folder,
"Water_value_indicator_v2.tif",
sep="/"),
overwrite=T)
writeRaster(ind1_2070-ind1,paste(Out_folder,
"Change_Water_value_indicator_2070min1990_v2.tif",
sep="/"),
overwrite=T)
writeRaster(ind1_2040-ind1,paste(Out_folder,
"Change_Water_value_indicator_2040min1990_v2.tif",
sep="/"),
overwrite=T)
# decrease in baseflow
# for the whole area
perc_dec_bf_2040<-(BF_2040-BF)/BF*100
perc_dec_bf_2070<-(BF_2070-BF)/BF*100
global(perc_dec_bf_2040,mean,na.rm=T)
global(perc_dec_bf_2040,min,na.rm=T)
global(perc_dec_bf_2040,max,na.rm=T)
global(perc_dec_bf_2070,mean,na.rm=T)
global(perc_dec_bf_2070,min,na.rm=T)
global(perc_dec_bf_2070,max,na.rm=T)
# per basin
BF_reduction_per_basin<-data.frame("2040_2070"=exact_extract(perc_dec_bf_2040,AraratRBMP,"mean"),
"2071_2100"=exact_extract(perc_dec_bf_2070,AraratRBMP,"mean"),
row.names=AraratRBMP$RB_NameEng)
# global
BF_reduction_global<-data.frame("2040_2070"=c(
exact_extract(perc_dec_bf_2040 ,AraratRBMP%>% st_union(),"mean"),
exact_extract(perc_dec_bf_2040,AraratRBMP %>% st_union(),"min"),
exact_extract(perc_dec_bf_2040 ,AraratRBMP%>% st_union(),"max")),
"2071_2100"=c(
exact_extract(perc_dec_bf_2070,AraratRBMP %>% st_union(),"mean"),
exact_extract(perc_dec_bf_2070 ,AraratRBMP %>% st_union(),"min"),
exact_extract(perc_dec_bf_2070 ,AraratRBMP%>% st_union(),"max")),
row.names=c("MEAN","MIN","MAX"))
global(perc_dec_bf_2070,min,na.rm=T)
library(terra)
library(raster)
library(tidyterra)
library(sf)
library(dplyr)
library(stringr)
library(exactextractr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # see here: https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
# beneficiary watersheds
beneficiaries_folder<-"./data/Inputs/Beneficiaries"
#Ararat RBMP area and river basins
RBMP_area_folder<-"./data/Inputs/aoi_shp"
# DEM folder
DEM_folder<-"./data/Inputs/swy/Hydrosheds"
DEM_file<-"DEM_90m_Armenia_hydrosheds_raw_Rafa_prj_bilinear.tif"
DEM<-rast(paste(DEM_folder,DEM_file,sep="/"))
# water yield folder
BF_folder<-"./data/Inputs/swy/AraratBMA_22062024"
BF_current_folder<-"SWY_1961_1990"
BF_2040_folder<-"SWY_2041_2070"
BF_2070_folder<-"SWY_2071_2100"
# load data
BF_file<-"B_1961_1990.tif"
BF_2040_file<-"B_2041_2070.tif"
BF_2070_file<-"B_2071_2100.tif"
BF<-rast(paste(BF_folder,BF_current_folder,BF_file,sep="/"))
BF_2040<-rast(paste(BF_folder,BF_2040_folder,BF_2040_file,sep="/"))
BF_2070<-rast(paste(BF_folder,BF_2070_folder,BF_2070_file,sep="/"))
BF<-resample(BF,DEM,method="bilinear")
BF_2040<-resample(BF_2040,DEM,method="bilinear")
BF_2070<-resample(BF_2070,DEM,method="bilinear")
AraratRBMP<-read_sf(paste(RBMP_area_folder,"aoi.shp",sep="/")) %>% filter(RB_NameEng==c("Azat","Vedi","Arpa") )
#output folder
Out_folder<-"./data/Outputs/valuation"
#### Analysis
# load servicesheds, match attributes and join servicesheds for fish, irrigation, hydropower together.
# load shapefiles
bf_ws_ff<-read_sf(paste(beneficiaries_folder,"ff_beneficiaries_servicesheds.shp",sep="/"))
bf_ws_shp<-read_sf(paste(beneficiaries_folder,"shpp_beneficiaries_servicesheds.shp",sep='/'))
bf_ws_irri<-read_sf(paste(beneficiaries_folder,"irrigation_beneficiaries_servicesheds.shp",sep="/"))
# assign type
bf_ws_ff$type="Fish Farm"
bf_ws_shp$type="Hydropower"
bf_ws_irri$type="Agriculture"
# keep only few, identical fields for each type of beneficiary
bf_ws_ff=bf_ws_ff %>% select("type","Rev_AMD")
bf_ws_shp=bf_ws_shp %>% select("type","Rev_AMD")
bf_ws_irri=bf_ws_irri %>% select("type","Rev_AMD")
# combine all beneficiary shapefiles in 1
bf_ws_comb<-rbind(bf_ws_ff,bf_ws_shp,bf_ws_irri)
# calculate value per m2. Note: remove units, because if the attribute used for accumulation has units attached, then the summation below will NOT work.
bf_ws_ff$area_m2<-st_area(bf_ws_ff) %>% as.vector()
bf_ws_shp$area_m2<-st_area(bf_ws_shp) %>% as.vector()
bf_ws_irri$area_m2<-st_area(bf_ws_irri) %>% as.vector()
bf_ws_ff$value_per_m2<-bf_ws_ff$Rev_AMD/bf_ws_ff$area_m2
bf_ws_shp$value_per_m2<-bf_ws_shp$Rev_AMD/bf_ws_shp$area_m2
bf_ws_irri$value_per_m2<-bf_ws_irri$Rev_AMD/bf_ws_irri$area_m2
### rasterized approach
# make storage structs
bf_ws_ff_stack<-list() #  for fishfarms
bf_ws_shp_stack<-list() #  for hydropower
bf_ws_irri_stack<-list() # for irrigation
# loop through beneficiary types
# loop through fishfarms
for (ii in 1:nrow(bf_ws_ff)){
bf_ws_ff_stack[[ii]]<-rasterize(x=bf_ws_ff[ii,],
y=DEM,
field="value_per_m2")
}
# loop through shp
for (ii in 1:nrow(bf_ws_shp)){
bf_ws_shp_stack[[ii]]<-rasterize(x=bf_ws_shp[ii,],
y=DEM,
field="value_per_m2")
}
# loop through irrigation
for (ii in 1:nrow(bf_ws_irri)){
bf_ws_irri_stack[[ii]]<-rasterize(x=bf_ws_irri[ii,],
y=DEM,
field="value_per_m2")
}
# get total values for each beneficiary type
bf_ws_ff_r<-app(rast(bf_ws_ff_stack),fun=sum,na.rm=T) %>% rename("fish farms"=sum)#  for fish farms
bf_ws_shp_r<-app(rast(bf_ws_shp_stack),fun=sum,na.rm=T) %>% rename("hydropower"=sum) #  for hydropower
bf_ws_irri_r<-app(rast(bf_ws_irri_stack),fun=sum,na.rm=T) %>% rename("irrigation"=sum)# for irrigation
# combine total sectoral values into raster stack
r<-c(bf_ws_ff_r,
bf_ws_irri_r,
bf_ws_shp_r)
plot(r)
# total value
bf_ws_tot_r  <- app(c(bf_ws_ff_r,
bf_ws_irri_r,
bf_ws_shp_r),
fun=sum,na.rm=T) %>% rename("total value"=sum)
plot(bf_ws_tot_r)
# write outputs rasters of cummulative water yield
writeRaster(bf_ws_tot_r,paste(Out_folder,
"Total_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_ff_r,paste(Out_folder,
"FF_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_shp_r,paste(Out_folder,
"SHP_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
writeRaster(bf_ws_irri_r,paste(Out_folder,
"IRRI_cum_water_value_v2.tif",
sep="/"),
overwrite=T)
### testing
plot(BF)
ind1<-bf_ws_tot_r*BF
names(ind1)<-  "current"
ind1_2070=bf_ws_tot_r*BF_2070
names(ind1_2070)<-  "2070"
ind1_2040=bf_ws_tot_r*BF_2040
names(ind1_2040)<-  "2040"
plot(c(ind1))
plot((ind1_2070-ind1))
plot((ind1_2040-ind1))
writeRaster(ind1,paste(Out_folder,
"Water_value_indicator_v2.tif",
sep="/"),
overwrite=T)
writeRaster(ind1_2070-ind1,paste(Out_folder,
"Change_Water_value_indicator_2070min1990_v2.tif",
sep="/"),
overwrite=T)
writeRaster(ind1_2040-ind1,paste(Out_folder,
"Change_Water_value_indicator_2040min1990_v2.tif",
sep="/"),
overwrite=T)
# decrease in baseflow
# for the whole area
perc_dec_bf_2040<-(BF_2040-BF)/BF*100
perc_dec_bf_2070<-(BF_2070-BF)/BF*100
global(perc_dec_bf_2040,mean,na.rm=T)
global(perc_dec_bf_2040,min,na.rm=T)
global(perc_dec_bf_2040,max,na.rm=T)
global(perc_dec_bf_2070,mean,na.rm=T)
global(perc_dec_bf_2070,min,na.rm=T)
global(perc_dec_bf_2070,max,na.rm=T)
# per basin
BF_reduction_per_basin<-data.frame("2040_2070"=exact_extract(perc_dec_bf_2040,AraratRBMP,"mean"),
"2071_2100"=exact_extract(perc_dec_bf_2070,AraratRBMP,"mean"),
row.names=AraratRBMP$RB_NameEng)
# global
BF_reduction_global<-data.frame("2040_2070"=c(
exact_extract(perc_dec_bf_2040 ,AraratRBMP%>% st_union(),"mean"),
exact_extract(perc_dec_bf_2040,AraratRBMP %>% st_union(),"min"),
exact_extract(perc_dec_bf_2040 ,AraratRBMP%>% st_union(),"max")),
"2071_2100"=c(
exact_extract(perc_dec_bf_2070,AraratRBMP %>% st_union(),"mean"),
exact_extract(perc_dec_bf_2070 ,AraratRBMP %>% st_union(),"min"),
exact_extract(perc_dec_bf_2070 ,AraratRBMP%>% st_union(),"max")),
row.names=c("MEAN","MIN","MAX"))
